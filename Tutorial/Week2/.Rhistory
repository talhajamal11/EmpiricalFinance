#Calculate & print variance-covariance
print(cov(CovSimple))
# SP500
SP500 <- SP500 %>%
group_by(Year = year(date), Month = month(date)) %>%
mutate(log_monthly_return = sum(log_daily_return)) %>%
ungroup() %>%
mutate(rolling_log_monthly_return = rollapply(log_daily_return, width = 31, FUN = function(x) sum(x), align = "right", fill = NA))
SP500 <- na.omit(SP500)
#Plotting
ggplot(SP500, aes(x = date, y = rolling_log_monthly_return)) +
geom_line() +
labs(title = "Log Monthly Returns of SP500",
x = "Date",
y = "Monthly Return")
# GBPUSD
GBPUSD <- GBPUSD %>%
group_by(Year = year(date), Month = month(date)) %>%
mutate(log_monthly_return = sum(log_daily_return)) %>%
ungroup() %>%
mutate(rolling_log_monthly_return = rollapply(log_daily_return, width = 21, FUN = function(x) sum(x), align = "right", fill = NA))
GBPUSD <- na.omit(GBPUSD)
ggplot(GBPUSD, aes(x = date, y = rolling_log_monthly_return)) +
geom_line() +
labs(title = "Log Monthly Returns of GBPUSD",
x = "Date",
y = "Monthly Return")
# FFR
FFR <- FFR %>%
group_by(Year = year(date), Month = month(date)) %>%
mutate(log_monthly_return = sum(log_daily_return)) %>%
ungroup() %>%
mutate(rolling_log_monthly_return = rollapply(log_daily_return, width = 21, FUN = function(x) sum(x), align = "right", fill = NA))
FFR <- na.omit(FFR)
ggplot(FFR, aes(x = date, y = rolling_log_monthly_return)) +
geom_line() +
labs(title = "Log Monthly Returns of FFR",
x = "Date",
y = "Monthly Return")
#SP500
acf_result <- acf(SP500$rolling_log_monthly_return, lag.max = 1, plot = FALSE)
print(SP500 %>%
summarize(
mean = mean(rolling_log_monthly_return, na.rm = TRUE),
median = median(rolling_log_monthly_return, na.rm = TRUE),
sd = sd(rolling_log_monthly_return, na.rm = TRUE),
skewness = skewness(rolling_log_monthly_return, na.rm = TRUE),
kurtosis = kurtosis(rolling_log_monthly_return, na.rm = TRUE),
min = min(rolling_log_monthly_return, na.rm = TRUE),
max = max(rolling_log_monthly_return, na.rm = TRUE),
serial_correlation = acf_result$acf[2]
))
#GBPUSD
acf_result <- acf(GBPUSD$rolling_log_monthly_return, lag.max = 1, plot = FALSE)
print(GBPUSD %>%
summarize(
mean = mean(rolling_log_monthly_return, na.rm = TRUE),
median = median(rolling_log_monthly_return, na.rm = TRUE),
sd = sd(rolling_log_monthly_return, na.rm = TRUE),
skewness = skewness(rolling_log_monthly_return, na.rm = TRUE),
kurtosis = kurtosis(rolling_log_monthly_return, na.rm = TRUE),
min = min(rolling_log_monthly_return, na.rm = TRUE),
max = max(rolling_log_monthly_return, na.rm = TRUE),
serial_correlation = acf_result$acf[2]
))
#FFR
acf_result <- acf(FFR$rolling_log_monthly_return, lag.max = 1, plot = FALSE)
print(FFR %>%
summarize(
mean = mean(rolling_log_monthly_return, na.rm = TRUE),
median = median(rolling_log_monthly_return, na.rm = TRUE),
sd = sd(rolling_log_monthly_return, na.rm = TRUE),
skewness = skewness(rolling_log_monthly_return, na.rm = TRUE),
kurtosis = kurtosis(rolling_log_monthly_return, na.rm = TRUE),
min = min(rolling_log_monthly_return, na.rm = TRUE),
max = max(rolling_log_monthly_return, na.rm = TRUE),
serial_correlation = acf_result$acf[2]
))
#SP500
acf_result <- acf(SP500$rolling_log_monthly_return, lag.max = 1, plot = FALSE)
print(SP500 %>%
mutate((1 + rolling_log_monthly_return)^12 -1) %>%
summarize(
mean = mean(rolling_log_monthly_return, na.rm = TRUE),
median = median(rolling_log_monthly_return, na.rm = TRUE),
sd = sd(rolling_log_monthly_return, na.rm = TRUE),
skewness = skewness(rolling_log_monthly_return, na.rm = TRUE),
kurtosis = kurtosis(rolling_log_monthly_return, na.rm = TRUE),
min = min(rolling_log_monthly_return, na.rm = TRUE),
max = max(rolling_log_monthly_return, na.rm = TRUE),
serial_correlation = acf_result$acf[2]
))
#GBPUSD
acf_result <- acf(GBPUSD$rolling_log_monthly_return, lag.max = 1, plot = FALSE)
print(GBPUSD %>%
mutate((1 +rolling_log_monthly_return)^12 -1) %>%
summarize(
mean = mean(rolling_log_monthly_return, na.rm = TRUE),
median = median(rolling_log_monthly_return, na.rm = TRUE),
sd = sd(rolling_log_monthly_return, na.rm = TRUE),
skewness = skewness(rolling_log_monthly_return, na.rm = TRUE),
kurtosis = kurtosis(rolling_log_monthly_return, na.rm = TRUE),
min = min(rolling_log_monthly_return, na.rm = TRUE),
max = max(rolling_log_monthly_return, na.rm = TRUE),
serial_correlation = acf_result$acf[2]
))
#FFR
acf_result <- acf(FFR$rolling_log_monthly_return, lag.max = 1, plot = FALSE)
print(FFR %>%
mutate((1 + rolling_log_monthly_return)^12 -1) %>%
summarize(
mean = mean(rolling_log_monthly_return, na.rm = TRUE),
median = median(rolling_log_monthly_return, na.rm = TRUE),
sd = sd(rolling_log_monthly_return, na.rm = TRUE),
skewness = skewness(rolling_log_monthly_return, na.rm = TRUE),
kurtosis = kurtosis(rolling_log_monthly_return, na.rm = TRUE),
min = min(rolling_log_monthly_return, na.rm = TRUE),
max = max(rolling_log_monthly_return, na.rm = TRUE),
serial_correlation = acf_result$acf[2]
))
#SP500
ggplot(SP500, aes(x = rolling_log_monthly_return)) +
geom_histogram(bins = 100,
color = "black",
fill = "white") +
ylab("") +
xlab("") +
ggtitle("Histogram of SP500 log monthly returns")
#GBPUSD
ggplot(GBPUSD, aes(x = rolling_log_monthly_return)) +
geom_histogram(bins = 100,
color = "black",
fill = "white") +
ylab("") +
xlab("") +
ggtitle("Histogram of GBPUSD log monthly returns")
#FFR
ggplot(FFR, aes(x = rolling_log_monthly_return)) +
geom_histogram(bins = 100,
color = "black",
fill = "white") +
ylab("") +
xlab("") +
ggtitle("Histogram of FFR log monthly returns")
#Join into one data frame
CovSimple <- FFR %>%
inner_join(.,SP500, join_by(date)) %>%
inner_join(., GBPUSD,join_by(date))
#Remove and rename non-return info
CovSimple <- CovSimple %>%
select(c(rolling_log_monthly_return, rolling_log_monthly_return.y, rolling_log_monthly_return.x)) %>%
rename(EFF=rolling_log_monthly_return, SP500 = rolling_log_monthly_return.y, GBPUSD = rolling_log_monthly_return.x)
CovSimple <- na.omit(CovSimple)
#Calculate & print variance-covariance
print(cov(CovSimple))
#SP500
ggplot(SP500, aes(x = rolling_monthly_return, y = rolling_log_monthly_return)) +
geom_point() +
labs(title = "Simple vs Log Monthly Returns of SP500",
x = "Monthly return",
y = "Log Monthly return")
#GDPUSD
ggplot(GBPUSD, aes(x = rolling_monthly_return, y = rolling_log_monthly_return)) +
geom_point() +
labs(title = "Simple vs Log Monthly Returns of GDPUSD",
x = "Monthly return",
y = "Log Monthly return")
#FFR
ggplot(FFR, aes(x = rolling_monthly_return, y = rolling_log_monthly_return)) +
geom_point() +
labs(title = "Simple vs Log Monthly Returns of FFR",
x = "Monthly return",
y = "Log Monthly return")
#A)
set.seed(1234)
mu <- 0
sigma <- 1
n <- 1000
ndist <- data.frame(x = rnorm(n, mu, sigma))
ggplot(ndist, aes(x = x)) +
geom_histogram(bins = 100,
color = "black",
fill = "white") +
ylab("") +
xlab("") +
ggtitle("Histogram of Normal Distribution")
#B)
# Set the parameters
mu <- 0  # mean
theta <- 1  # scale
nu <- 5  # degrees of freedom
# Generate random samples from a standardized t-distribution
tdist <- data.frame(x = mu + theta * rt(n, df = nu))
ggplot(tdist, aes(x = x)) +
geom_histogram(bins = 100,
color = "black",
fill = "white") +
ylab("") +
xlab("") +
ggtitle("Histogram of T Distribution")
#C)
# Set the parameters
mu <- 0  # mean
theta <- 1  # scale
nu <- 30  # degrees of freedom
# Generate random samples from a standardized t-distribution
tdist <- data.frame(x = mu + theta * rt(n, df = nu))
ggplot(tdist, aes(x = x)) +
geom_histogram(bins = 100,
color = "black",
fill = "white") +
ylab("") +
xlab("") +
ggtitle("Histogram of T Distribution")
#D)
# Set the parameters
mu <- 0  # mean
theta <- 1  # scale
nu <- 5  # degrees of freedom
epsilon <- .5 #skew
# Generate random samples from a standardized t-distribution
tdist <- data.frame(x = mu + theta * rt(n, df = nu, ncp = epsilon))
ggplot(tdist, aes(x = x)) +
geom_histogram(bins = 100,
color = "black",
fill = "white") +
ylab("") +
xlab("") +
ggtitle("Histogram of T Distribution")
#E)
# Set the parameters
mu <- 0  # mean
theta <- 1  # scale
nu <- 5  # degrees of freedom
epsilon <- 2 #skew
# Generate random samples from a standardized t-distribution
tdist <- data.frame(x = mu + theta * rt(n, df = nu, ncp = epsilon))
ggplot(tdist, aes(x = x)) +
geom_histogram(bins = 100,
color = "black",
fill = "white") +
ylab("") +
xlab("") +
ggtitle("Histogram of T Distribution")
#
n <- 10000
rand_unifs<- data.frame(x = runif(n, min = 0, max = 10)) #runif will give us a uniform distribution
rand_unifs %>%
ggplot(aes(x=x)) +
geom_histogram(binwidth=1)
rand_poiss<- data.frame(x = rpois(n, lambda = 4.5)) #rpoiss will give us a poisson distribution with the arguments n and lambda
rand_poiss %>%
ggplot(aes(x=x)) +
geom_histogram(binwidth=1)
library(tidyverse)
library(readxl)
library(zoo)
library(quantmod)
library(stargazer)
library(tinytex)
library(rmarkdown)
rm(list = ls())
set.seed(12345)
#Set our time period
n <- 1000
#Set our constants according to the problem
c <- 0.2
beta <- 0.1
delta <- 0.05
phi_1 <- 0.4
phi_2 <- 0.3
phi_3 <- 0.2
theta_1 <- 0.4
theta_2 <- 0.3
sigma <- 1
#Generate our error term
epsilon <- rnorm(1000, mean = 0, sd = 1)
# Generate the trend
tt = (1:n)
t2 = (1:n)^2
#Create a data frame
time_series <- data.frame(period = 1:n,
yt_1 = c + epsilon,
yt_2 = numeric(n),
yt_3 = numeric(n),
yt_4 = numeric(n),
yt_5 = numeric(n),
yt_6 = numeric(n),
yt_7 = numeric(n),
yt_8 = numeric(n))
for (t in 1:n){
time_series$yt_2[t] <- c + beta*tt[t] + delta*t2[t] + epsilon[t]
}
# Calculate unconditional mean and volatility
emean =         c/(1-phi_1)
evar  = (sigma^2)/(1-(phi_1^2))
# Initialize the time series vector with normal shock
time_series$yt_1[1] <- rnorm(1, mean = emean, sd = evar) #starting value
time_series$yt_2[1] <- rnorm(1, mean = emean, sd = evar)
time_series$yt_3[1] <- rnorm(1, mean = emean, sd = evar)
time_series$yt_4[1] <- rnorm(1, mean = emean, sd = evar)
time_series$yt_5[1] <- rnorm(1, mean = emean, sd = evar)
time_series$yt_6[1] <- rnorm(1, mean = emean, sd = evar)
time_series$yt_7[1] <- rnorm(1, mean = emean, sd = evar)
time_series$yt_8[1] <- rnorm(1, mean = emean, sd = evar)
for (t in 2:n){
time_series$yt_3[t] <- c + time_series$yt_3[t-1] + epsilon[t]
time_series$yt_4[t] <- c + phi_1*time_series$yt_4[t-1] + epsilon[t]
time_series$yt_6[t] <- c + epsilon[t] + theta_1*epsilon[t-1]
time_series$yt_8[t] <- c + phi_1*time_series$yt_8[t-1] + epsilon[t] + theta_1*epsilon[t-1]
}
for (t in 3:n){
time_series$yt_7[t] <- c + epsilon[t] + theta_1*epsilon[t-1] + theta_2*epsilon[t-2]
}
for (t in 4:n){
time_series$yt_5[t] <- c + phi_1*time_series$yt_5[t-1] + phi_2*time_series$yt_5[t-2] + phi_3*time_series$yt_5[t-3] + epsilon[t]
}
time_series %>%
ggplot(aes(x = period, y=yt_1))+
geom_line()
acf(time_series$yt_1)
acf(time_series$yt_1, type = "partial")
time_series %>%
ggplot(aes(x = period, y=yt_2))+
geom_line()
acf(time_series$yt_2)
acf(time_series$yt_2, type = "partial")
time_series %>%
ggplot(aes(x = period, y=yt_3))+
geom_line()
acf(time_series$yt_3)
acf(time_series$yt_3, type = "partial")
time_series %>%
ggplot(aes(x = period, y=yt_4))+
geom_line()
acf(time_series$yt_4)
acf(time_series$yt_4, type = "partial")
time_series %>%
ggplot(aes(x = period, y=yt_5))+
geom_line()
acf(time_series$yt_5)
acf(time_series$yt_5, type = "partial")
time_series %>%
ggplot(aes(x = period, y=yt_7))+
geom_line()
acf(time_series$yt_7)
acf(time_series$yt_7, type = "partial")
time_series %>%
ggplot(aes(x = period, y=yt_7))+
geom_line()
acf(time_series$yt_7)
acf(time_series$yt_7, type = "partial")
#read data
SP500 <- read_excel("data_3.xlsx")
GBPUSD <- read_excel("data_3.xlsx", sheet = 2)
TBILL <- read_excel("data_3.xlsx", sheet = 3)
VIX <- read_excel("data_3.xlsx", sheet = 4)
#mutate to returns
SP500 <- SP500 %>%
mutate(daily_return = log((SP500)/lag(SP500)))
GBPUSD <- GBPUSD %>%
mutate(daily_return = log((GBPUSD)/lag(GBPUSD)))
TBILL <- TBILL %>%
mutate(daily_return = log((TBILL)/lag(TBILL)))
VIX <- VIX %>%
mutate(daily_return = log((VIX)/lag(VIX)))
#plot to make sure data looks right
#SP500
ggplot(SP500, aes(x = date, y = daily_return)) +
geom_line() +
labs(title = "Daily Returns of SP500",
x = "Date",
y = "Daily Return")
#GBPUSD
ggplot(GBPUSD, aes(x = date, y = daily_return)) +
geom_line() +
labs(title = "Daily Returns of GBPUSD",
x = "Date",
y = "Daily Return")
#TBILL
ggplot(TBILL, aes(x = date, y = daily_return)) +
geom_line() +
labs(title = "Daily Returns of TBILL",
x = "Date",
y = "Daily Return")
#VIX
ggplot(VIX, aes(x = date, y = daily_return)) +
geom_line() +
labs(title = "Daily Returns of VIX",
x = "Date",
y = "Daily Return")
#SP500
SP500 <- na.omit(SP500)
acf(SP500$daily_return)
acf(SP500$daily_return, type = "partial")
#SP500 fitting
SP500_model <- arima(SP500$daily_return, order = c(0, 0, 1))
residuals <- residuals(SP500_model)
plot(residuals, main = "Residuals of SP500 AR(1) Model")
acf(residuals)
Box.test(residuals, lag=20, type = "Ljung-Box")
#GPBUSD
GBPUSD <- na.omit(GBPUSD)
acf(GBPUSD$daily_return)
acf(GBPUSD$daily_return, type = "partial")
#GPBUSD fitting
GBPUSD_model <- arima(GBPUSD$daily_return, order = c(0, 0, 1))
residuals <- residuals(GBPUSD_model)
plot(residuals, main = "Residuals of GBPUSD MA(1) Model")
acf(residuals)
Box.test(residuals, lag=20, type = "Ljung-Box")
#TBILL
TBILL <- na.omit(TBILL)
TBILL <- TBILL$daily_return[is.finite(TBILL$daily_return)]
acf(TBILL)
acf(TBILL, type = "partial")
#TBILL fitting
TBILL_model <- arima(TBILL, order = c(1, 0, 1))
residuals <- residuals(TBILL_model)
plot(residuals, main = "Residuals of TBILL AR(1) Model")
acf(residuals)
Box.test(residuals, lag=20, type = "Ljung-Box")
# Function to fit ARIMA models and return AIC
fit_arima <- function(p, d, q) {
model <- arima(TBILL, order = c(p, d, q))
return(AIC(model))
}
# Define a range of values for p, d, and q
p_values <- c(0, 1, 2,3,4,5)
d_values <- c(0, 1)
q_values <- c(0, 1, 2,3,4,5)
# Initialize variables
best_aic <- Inf
best_order <- c(0, 0, 0)
# Loop through combinations of p, d, and q
for (p in p_values) {
for (d in d_values) {
for (q in q_values) {
# Skip combinations that are not feasible
if (p + d + q <= 2) {
current_aic <- fit_arima(p, d, q)
# Update if the current AIC is better
if (current_aic < best_aic) {
best_aic <- current_aic
best_order <- c(p, d, q)
}
}
}
}
}
# Fit the best model
best_model <- arima(TBILL, order = best_order)
# Print the best order and AIC
cat("Best Order (p, d, q):", best_order, "\n")
cat("Best AIC:", best_aic, "\n")
#VIX
VIX <- na.omit(VIX)
acf(VIX$daily_return)
acf(VIX$daily_return, type = "partial")
#VIX fitting
VIX_model <- arima(VIX$daily_return, order = c(1, 0, 1))
residuals <- residuals(VIX_model)
plot(residuals, main = "Residuals of VIX ARMA(1) Model")
acf(residuals)
Box.test(residuals, lag=20, type = "Ljung-Box")
# Function to fit ARIMA models and return AIC
fit_arima <- function(p, d, q) {
model <- arima(VIX$daily_return, order = c(p, d, q))
return(AIC(model))
}
# Define a range of values for p, d, and q
p_values <- c(0, 1, 2,3,4,5)
d_values <- c(0, 1)
q_values <- c(0, 1, 2,3,4,5)
# Initialize variables
best_aic <- Inf
best_order <- c(0, 0, 0)
# Loop through combinations of p, d, and q
for (p in p_values) {
for (d in d_values) {
for (q in q_values) {
# Skip combinations that are not feasible
if (p + d + q <= 2) {
current_aic <- fit_arima(p, d, q)
# Update if the current AIC is better
if (current_aic < best_aic) {
best_aic <- current_aic
best_order <- c(p, d, q)
}
}
}
}
}
# Fit the best model
best_model <- arima(VIX$daily_return, order = best_order)
# Print the best order and AIC
cat("Best Order (p, d, q):", best_order, "\n")
cat("Best AIC:", best_aic, "\n")
#https://cran.r-project.org/web/packages/stargazer/vignettes/stargazer.pdf
# Create a sample data frame
data <- data.frame(
x1 = rnorm(100),
x2 = rnorm(100),
y = 2 * data$x1 + 3 * data$x2 + rnorm(100)
)
#https://cran.r-project.org/web/packages/stargazer/vignettes/stargazer.pdf
# Create a sample data frame
data <- data.frame(
x1 = rnorm(100),
x2 = rnorm(100),
y = 2 * data$x1 + 3 * data$x2 + rnorm(100)
)
