package_name <- "tidyverse"
# Check if the package is installed
if (!requireNamespace(package_name, quietly = TRUE)) {
# If not installed, install the package
install.packages(package_name)}
library(package_name, character.only = TRUE)
library(tidyverse)
mydata <- read_csv("eaef21.csv") # load the dataset eaef21.csv into R
#mydata <- read_csv("C:/Users/gilli/OneDrive/Documents/EF_tutorial_1/eaef21.csv")
#Sometimes your data is only available as a xlxs file.
#example <-read_exel(example)
#More info on importing various types of data https://github.com/rstudio/cheatsheets/blob/main/data-import.pdf
#Here is the chapter on data importing from "R for Data Sicence" https://r4ds.had.co.nz/data-import.html
#install.packages("wbstats")
library(wbstats)
gdp_data <- wb_data(country = c("AF","CA"), indicator = "NY.GDP.PCAP.CD")
class(mydata)   # class will show us the type of object 'mydata'
mydata <- as.data.frame(mydata)   # change object to data.frame
class(mydata)
View(gdp_data)
summary(mydata) # gives you a simple summary of your dataset (not very nice looking)
nrow(mydata)    # gives the number of rows
ncol(mydata)    # gives the number of columns
# this will apply function class to each column of the dataset
apply(mydata,     # the dataset to work on
MARGIN = 2, # 1 to work by rows and 2 by columns
FUN = mean) # the function to apply
rm(gdp_data) # remove R object from environment
if(!require(tidyverse)){install.packages("tidyverse")}
library(tidyverse)          # Package for data manipulation
# the following code gives same result as
# mean(mydata$EARNINGS)
mydata %>%
summarize(mean(EARNINGS))
# create and add a new variable
mydata %>%
mutate(EDUCUNI = EDUCBA + EDUCMAST) %>%
head(3)
mydata %>%
group_by(MARRIED) %>%
mutate(DHOURS = HOURS - mean(HOURS)) %>%
head()
# mutate/summarize by groups
mydata %>%
group_by(FEMALE) %>%
summarize(mean(EXP))
# you can also 'filter' rows and 'select' columns
mydata %>%
mutate(AGE_D = ifelse(AGE <= 40, "below 40", "above 40")) %>%
group_by(AGE_D) %>%
summarise(mean(EARNINGS), mean(HOURS))
# you can also 'filter' rows and 'select' columns
mydata %>%
filter(AGE > 40) %>%
select(EARNINGS, EXP, FEMALE) %>%
head()
# classic R
classic <- filter(mydata, AGE > 40)
classic1 <- select(classic,c(EARNINGS, EXP, FEMALE))
classic2 <- head(classic1)
print(classic2)
head(mydata)
avg_male_earnings <- filter(mydata, MALE == 1)
head(avg_male_earnings)
avg_male_earnings <- filter(mydata, MALE == 1)
head(avg_male_earnings)
avg_female_earnings <- filter(mydata, MALE == 0)
head(avg_female_earnings)
View(mydata)
View(mydata)
filtered_data -> mydata %>%
filter(AGE > 40, EDUCMAST == 1) %>%
head(filtered_data)
filtered_data -> mydata %>%
filter(AGE > 40, EDUCMAST == 1) %>%
head(filtered_data)
filtered_data -> mydata %>%
filter(AGE > 40, EDUCMAST == 1)
filtered_data -> mydata
filtered_data <- mydata %>%
filter(AGE > 40, EDUCMAST == 1)
head(filtered_data)
avg_earnings_male <- mydata %>%
filter(AGE > 40, EDUCMAST == 1, MALE == 1) %>%
group_by(MALE) %>%
summarize(AverageEarnings = mean(EARNINGS, na.rm = TRUE))
head(avg_earnings_male)
avg_earnings_male <- mydata %>%
filter(AGE > 40, EDUCMAST == 1) %>%
group_by(MALE) %>%
summarize(AverageEarnings = mean(EARNINGS, na.rm = TRUE))
head(avg_earnings_male)
mydata %>%
ggplot(aes(EARNINGS)) +
geom_histogram(bins = 5,
color = "black",
fill = "white") +
ylab("") +
xlab("") +
ggtitle("Histograms of Earnings (Frequency)")
mydata %>%
ggplot(aes(EARNINGS)) +
geom_histogram(bins = 35,
color = "black",
fill = "white") +
ylab("") +
xlab("") +
ggtitle("Histograms of Earnings (Frequency)")
mydata %>%
ggplot(aes(EARNINGS)) +
geom_histogram(aes(y = after_stat(density)),
bins = 100,
color = "grey30",
fill = "white") +
geom_density(alpha = .2,
fill = "antiquewhite3") +
ylab("") +
xlab("") +
ggtitle("Histograms of Earnings (Density)")
mod0 <- mydata %>%
lm(log(EARNINGS) ~ EXP, data = .)
mod0 %>% summary()
mod1 <- mydata %>%
lm(log(EARNINGS) ~ AGE + EXP +
EDUCPROF + EDUCPHD +
EDUCMAST + EDUCBA +
EDUCAA + EDUCHSD +
EDUCDO, data = .)
mod1 %>% summary()
avg_earnings <- mydata %>%
filter(AGE > 40, EDUCMAST == 1) %>%
group_by(MALE) %>%
summarize(AverageEarnings = mean(EARNINGS, na.rm = TRUE))
head(avg_earnings)
# 0 represents women
# 1 represents men
tlmgr update --self --all
tlmgr update
